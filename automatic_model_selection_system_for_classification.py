# -*- coding: utf-8 -*-
"""Automatic Model Selection System For Classification

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GmjdPzPvNes0FKzWXFGFaFvFeh29JuaM
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score, classification_report
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier
from sklearn.svm import SVC
from sklearn.neighbors import KNeighborsClassifier
import joblib

data = pd.read_csv("/content/glaucoma_dataset.csv")
data.head()

X_train, X_test, y_train, y_test = train_test_split(data.drop('Diagnosis', axis=1), data['Diagnosis'], test_size=0.2, random_state=42)

X_train_encoded = pd.get_dummies(X_train, drop_first=True)
X_test_encoded = pd.get_dummies(X_test, drop_first=True)

print("\nShape of X_train after encoding:", X_train_encoded.shape)
print("Shape of X_test after encoding:", X_test_encoded.shape)

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train_encoded)

X_test_encoded = X_test_encoded.reindex(columns=X_train_encoded.columns, fill_value=0)

X_test_scaled = scaler.transform(X_test_encoded)

print("\nShape of X_train after scaling:", X_train_scaled.shape)
print("Shape of X_test after scaling:", X_test_scaled.shape)

models = {
    "Logistic Regression": LogisticRegression(),
    "Random Forest": RandomForestClassifier(),
    "SVM": SVC(probability=True),
    "KNN": KNeighborsClassifier(),
    "Gradient Boosting": GradientBoostingClassifier()
}

from sklearn.preprocessing import LabelEncoder

le = LabelEncoder()
y_train_encoded = le.fit_transform(y_train)
y_test_encoded = le.transform(y_test)

results = {}
for name, model in models.items():
    model.fit(X_train_scaled, y_train_encoded)
    preds = model.predict(X_test_scaled)
    acc = accuracy_score(y_test_encoded, preds)
    results[name] = acc
    print(f"{name}: Accuracy = {acc:.4f}")

# Find the best model
best_model_name = max(results, key=results.get)
best_model = models[best_model_name]
print(f"\nâœ… Best Model: {best_model_name} with accuracy {results[best_model_name]:.4f}")

